// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SimpleVoting {
    address public owner;
    string public votingTopic;
    mapping(address => bool) public hasVoted;
    mapping(uint256 => uint256) public voteCount;

    event Voted(address indexed voter, uint256 option);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    constructor(string memory _votingTopic, uint256 numOptions) {
        owner = msg.sender;
        votingTopic = _votingTopic;
        require(numOptions > 0, "Number of options must be greater than zero");
        voteCount[0] = 0; // Initialize vote counts for each option
        for (uint256 i = 1; i <= numOptions; i++) {
            voteCount[i] = 0;
        }
    }

    function vote(uint256 option) external {
        require(!hasVoted[msg.sender], "You have already voted");
        require(option > 0 && option <= (voteCount.length - 1), "Invalid option");

        hasVoted[msg.sender] = true;
        voteCount[option]++;

        emit Voted(msg.sender, option);
    }

    function getVoteCount(uint256 option) external view returns (uint256) {
        require(option > 0 && option <= (voteCount.length - 1), "Invalid option");
        return voteCount[option];
    }
}
