// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract TokenSwap {
    address public owner;
    mapping(address => uint256) public balances;

    event Swap(address indexed sender, address indexed tokenFrom, address indexed tokenTo, uint256 amountFrom, uint256 amountTo);

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    function depositETH() external payable {
        require(msg.value > 0, "Deposit amount must be greater than zero");
        balances[address(0)] += msg.value;
    }

    function depositToken(address tokenAddress, uint256 amount) external {
        require(tokenAddress != address(0), "Invalid token address");
        require(amount > 0, "Deposit amount must be greater than zero");

        IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);
        balances[tokenAddress] += amount;
    }

    function withdrawETH(uint256 amount) external onlyOwner {
        require(amount > 0 && amount <= address(this).balance, "Invalid withdrawal amount");

        payable(owner).transfer(amount);
        balances[address(0)] -= amount;
    }

    function withdrawToken(address tokenAddress, uint256 amount) external onlyOwner {
        require(tokenAddress != address(0), "Invalid token address");
        require(amount > 0 && amount <= balances[tokenAddress], "Invalid withdrawal amount");

        IERC20(tokenAddress).transfer(owner, amount);
        balances[tokenAddress] -= amount;
    }

    function swapETHForToken(address tokenAddress, uint256 amount) external {
        require(tokenAddress != address(0), "Invalid token address");
        require(amount > 0 && amount <= address(this).balance, "Invalid swap amount");

        IERC20(tokenAddress).transfer(msg.sender, amount);
        balances[tokenAddress] -= amount;
        balances[address(0)] += amount;

        emit Swap(msg.sender, address(0), tokenAddress, amount, amount);
    }

    function swapTokenForETH(address tokenAddress, uint256 amount) external {
        require(tokenAddress != address(0), "Invalid token address");
        require(amount > 0 && amount <= balances[tokenAddress], "Invalid swap amount");

        IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);
        payable(msg.sender).transfer(amount);
        balances[tokenAddress] -= amount;
        balances[address(0)] += amount;

        emit Swap(msg.sender, tokenAddress, address(0), amount, amount);
    }

    function swapTokenForToken(address tokenFrom, address tokenTo, uint256 amount) external {
        require(tokenFrom != address(0) && tokenTo != address(0), "Invalid token address");
        require(amount > 0 && amount <= balances[tokenFrom], "Invalid swap amount");

        IERC20(tokenFrom).transferFrom(msg.sender, address(this), amount);
        IERC20(tokenTo).transfer(msg.sender, amount);
        balances[tokenFrom] -= amount;
        balances[tokenTo] += amount;

        emit Swap(msg.sender, tokenFrom, tokenTo, amount, amount);
    }
}
