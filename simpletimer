// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Timer {
    address public owner;
    uint256 public endTime;

    event TimerStarted(address indexed initiator, uint256 duration);
    event TimeExpired(address indexed initiator, uint256 endTime);

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    function startTimer(uint256 duration) external onlyOwner {
        require(duration > 0, "Duration must be greater than zero");
        endTime = block.timestamp + duration;
        emit TimerStarted(msg.sender, duration);
    }

    function checkTime() external {
        require(block.timestamp >= endTime, "Timer has not expired yet");
        emit TimeExpired(msg.sender, endTime);
    }
}
