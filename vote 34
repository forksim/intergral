// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract BlockchainVoting {
    address public owner;
    string public electionName;
    uint256 public totalVotes;

    mapping(address => bool) public hasVoted;
    mapping(uint256 => uint256) public votesReceived;

    event VoteCasted(address indexed voter, uint256 candidateId);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    constructor(string memory _electionName) {
        owner = msg.sender;
        electionName = _electionName;
    }

    function vote(uint256 candidateId) external {
        require(!hasVoted[msg.sender], "You have already voted");
        require(candidateId > 0, "Invalid candidate ID");

        hasVoted[msg.sender] = true;
        votesReceived[candidateId]++;
        totalVotes++;

        emit VoteCasted(msg.sender, candidateId);
    }

    function getVotesCount(uint256 candidateId) external view returns (uint256) {
        require(candidateId > 0, "Invalid candidate ID");

        return votesReceived[candidateId];
    }

    function resetVotes() external onlyOwner {
        for (uint256 i = 1; i <= 5; i++) {
            votesReceived[i] = 0;
        }
        totalVotes = 0;
    }
}
